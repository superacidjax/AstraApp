class Api::V1::EventsController < ApplicationController
  before_action :authenticate

  def create
    required_params = %w[ user_id application_id timestamp properties ]
    missing_params = required_params.select { |param| params[param].blank? }

    if missing_params.any?
      render json: { error: "Missing required parameters: #{missing_params.join(', ')}" }, status: :bad_request
      return
    end

    unless valid_uuid?(params[:user_id])
      render json: { error: "Invalid user_id. It must be a valid UUID." }, status: :bad_request
      return
    end

    unless valid_iso8601_timestamp?(params[:timestamp])
      render json: { error: "Invalid timestamp format. It must be in ISO8601 format." }, status: :bad_request
      return
    end

    unless params[:properties].is_a?(ActionController::Parameters) && params[:properties].present?
      render json: { error: "Properties must be a non-empty hash." }, status: :bad_request
      return
    end

    permitted_properties = params[:properties].permit!

    event = {
      user_id: params[:user_id],
      application_id: params[:application_id],
      timestamp: params[:timestamp],
      properties: permitted_properties.to_h
    }

    # EventProcessorJob.perform_later(event)
    render json: event, status: :created
  end

  private

  def authenticate
    username = Rails.application.credentials.dig(:basic_auth, :username)
    password = Rails.application.credentials.dig(:basic_auth, :password)
    authenticate_or_request_with_http_basic do |provided_username, provided_password|
      ActiveSupport::SecurityUtils.secure_compare(provided_username, username) &
        ActiveSupport::SecurityUtils.secure_compare(provided_password, password)
    end
  end

  def valid_uuid?(uuid)
    uuid_regex = /\A[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\z/i
    uuid_regex.match?(uuid)
  end

  def valid_iso8601_timestamp?(timestamp)
    DateTime.iso8601(timestamp)
    true
  rescue ArgumentError
    false
  end
end
